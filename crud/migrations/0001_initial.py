# Generated by Django 4.2.5 on 2023-09-06 16:35

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    """
    This migration creates several models for a learning platform: Course, User, Instructor, Learner, Lesson, and Enrollment.
    """

    initial = True

    dependencies = [
    ]

    operations = [
        # Create Course model
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='online course', max_length=100)),
                ('description', models.CharField(max_length=500)),
            ],
        ),
        # Create User model
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(default='john', max_length=30)),
                ('last_name', models.CharField(default='doe', max_length=30)),
                ('dob', models.DateField(null=True)),
            ],
        ),
        # Create Instructor model
        migrations.CreateModel(
            name='Instructor',
            fields=[
                # Inherits from User
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='crud.user')),
                ('full_time', models.BooleanField(default=True)),
                ('total_learners', models.IntegerField()),
            ],
            # Specify User as the base model
            bases=('crud.user',),
        ),
        # Create Learner model
        migrations.CreateModel(
            name='Learner',
            fields=[
                # Inherits from User
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='crud.user')),
                ('occupation', models.CharField(choices=[('student', 'Student'), ('developer', 'Developer'), ('data_scientist', 'Data Scientist'), ('dba', 'Database Admin')], default='student', max_length=20)),
                ('social_link', models.URLField()),
            ],
            # Specify User as the base model
            bases=('crud.user',),
        ),
        # Create Lesson model
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='title', max_length=200)),
                ('content', models.TextField()),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='crud.course')),
            ],
        ),
        # Create Enrollment model
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_enrolled', models.DateField(default=django.utils.timezone.now)),
                ('mode', models.CharField(choices=[('audit', 'Audit'), ('honor', 'Honor')], default='audit', max_length=5)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crud.course')),
                ('learner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crud.learner')),
            ],
        ),
        # Add instructors field to Course model
        migrations.AddField(
            model_name='course',
            name='instructors',
            field=models.ManyToManyField(to='crud.instructor'),
        ),
        # Add learners field to Course model through Enrollment model
        migrations.AddField(
            model_name='course',
            name='learners',
            field=models.ManyToManyField(through='crud.Enrollment', to='crud.learner'),
        ),
    ]
